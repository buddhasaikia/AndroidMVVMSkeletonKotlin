plugins {
    id "org.sonarqube" version "2.6"
    id 'kotlin-android-extensions'
}
apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

androidExtensions {
    experimental = true
}

static def getDate() {
    new Date().format('yyyyMMdd')
}

android {
    compileSdk rootProject.ext.compileSdkVersion

    flavorDimensions "default"
    productFlavors {
        dev {
            applicationId "com.androidskeleton.dev"
            buildConfigField 'String', 'PREF_NAME', '"pref_dev"'
            buildConfigField 'String', 'FLAVOR_CODE', '"D"'
            buildConfigField 'String', 'URL_HOST_API', '"https://api.yourdomain.com"'
        }
        prod {
            applicationId "com.androidskeleton"
            buildConfigField 'String', 'PREF_NAME', '"pref_prod"'
            buildConfigField 'String', 'FLAVOR_CODE', '"P"'
            buildConfigField 'String', 'URL_HOST_API', '"https://api.yourdomain.com"'
        }
        mock {
            applicationId "com.androidskeleton.mock"
            buildConfigField 'String', 'PREF_NAME', '"pref_mock"'
            buildConfigField 'String', 'FLAVOR_CODE', '"M"'
            buildConfigField 'String', 'URL_HOST_API', '"https://api.yourdomain.com"'
        }
    }
    signingConfigs {
        config {
            keyAlias 'keyalias'
            keyPassword 'keypassword'
            storeFile file('path_to_jks_file\\keyfile.jks')
            storePassword 'storepassword'
        }
    }
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        defaultConfig {
            applicationId "com.androidskeleton"
            minSdk rootProject.ext.minSdkVersion
            targetSdk rootProject.ext.targetSdkVersion
            versionCode code
            versionName "0.1.0"
            archivesBaseName = "ProjectName-$versionName" + "." + versionCode + "-" + getDate()
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties! ")
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro',
                    'proguard-fresco.pro',
                    'proguard-rxjava.pro'
            debuggable false
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    defaultConfig {}
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appcompat"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.recyclerview"
    implementation "com.google.android.material:material:$rootProject.ext.material"
    implementation "androidx.legacy:legacy-support-v4:$rootProject.ext.supportV4"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardview"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayout"
    testImplementation "junit:junit:$rootProject.ext.junit"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitExt"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.espressoCore"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.ext.lifecycleExtension"
    implementation "com.google.dagger:dagger-android:$rootProject.ext.dagger2"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.ext.dagger2"
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.dagger2"
    implementation "com.google.dagger:dagger:$rootProject.ext.dagger2"
    implementation "com.google.dagger:dagger-android-support:$rootProject.ext.dagger2"

    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroid"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxandroid"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$rxandroidAdapter"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.loggingInterceptor"
    implementation "com.facebook.stetho:stetho:$rootProject.ext.stetho"
    implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.ext.stetho"
    implementation "com.facebook.fresco:fresco:$rootProject.ext.fresco"
    androidTestImplementation "com.google.code.findbugs:jsr305:$rootProject.ext.findBugs"
    //implementation "com.orhanobut:logger:$logger"
}
